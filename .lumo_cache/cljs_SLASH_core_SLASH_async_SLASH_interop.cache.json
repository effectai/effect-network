["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.interop","~:imports",null,"~:requires",["^ ","~$async","~$cljs.core.async","^:","^:"],"~:uses",null,"~:defs",["^ ","~$p->c",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",13,"~:column",7,"~:end-line",13,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^F",[["~$p"]]]]],"~:doc","EXPERIMENTAL: Puts the promise resolution into a promise-chan and returns it.\n   The value of a rejected promise will be wrapped in a instance of\n   ExceptionInfo, acessible via ex-cause."],"^5","~$cljs.core.async.interop/p->c","^@","cljs/core/async/interop.cljs","^D",11,"~:method-params",["^F",[["~$p"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^B",1,"~:variadic?",false,"^A",13,"~:ret-tag","~$any","^C",13,"~:max-fixed-arity",1,"~:fn-var",true,"^E",["^F",["^G",["^F",[["~$p"]]]]],"^H","EXPERIMENTAL: Puts the promise resolution into a promise-chan and returns it.\n   The value of a rejected promise will be wrapped in a instance of\n   ExceptionInfo, acessible via ex-cause."]],"~:require-macros",["^ ","^6","^6","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:error","~:promise-error"]],"~:order",["^U","^V"]],"^H",null]