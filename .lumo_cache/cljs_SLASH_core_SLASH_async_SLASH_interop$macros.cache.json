["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.interop$macros","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$<p!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$cljs.core.async.interop","~:line",11,"~:column",11,"~:end-line",11,"~:end-column",14,"~:macro",true,"~:arglists",["~#list",["~$quote",["^F",[["~$exp"]]]]],"~:doc","EXPERIMENTAL: Takes the value of a promise resolution. The value of a rejected promise\n  will be thrown wrapped in a instance of ExceptionInfo, acessible via ex-cause."],"^5","~$cljs.core.async.interop$macros/<p!","^>","cljs/core/async/interop.clj","^C",14,"~:method-params",["^F",[["~$&form","~$&env","^H"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^A",1,"~:variadic?",false,"^@",11,"^D",true,"~:ret-tag",["^4",["~$seq","~$cljs.core/IList"]],"^B",11,"~:max-fixed-arity",3,"~:fn-var",false,"^E",["^F",["^G",["^F",[["^H"]]]]],"^I","EXPERIMENTAL: Takes the value of a promise resolution. The value of a rejected promise\n  will be thrown wrapped in a instance of ExceptionInfo, acessible via ex-cause."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$cljs.core.async.interop/p->c","~$cljs.core/=","~:promise-error","~$cljs.core/ExceptionInfo","~$if","~$cljs.core/let","~:error","~$cljs.core/and","~$cljs.core/ex-data","~$cljs.core.async/<!","~$v__29__auto__","~$throw","~$cljs.core/instance?"]],"~:order",["^12","^17","^16","^Y","^11","^14","^19","^10","^Z","^13","^15","^[","^18"]],"^I",null]