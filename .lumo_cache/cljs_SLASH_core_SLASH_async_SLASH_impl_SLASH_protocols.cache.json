["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.impl.protocols","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$remove!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",32,"~:column",4,"~:end-line",32,"~:end-column",11,"~:protocol","~$cljs.core.async.impl.protocols/Buffer","~:doc","remove and return next item from buffer, called under chan mutex","~:arglists",["~#list",["~$quote",["^I",[["~$b"]]]]]],"^E","^F","^7","~$cljs.core.async.impl.protocols/remove!","^@","cljs/core/async/impl/protocols.cljs","^D",11,"~:method-params",["^I",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^B",1,"~:variadic?",false,"^A",30,"~:ret-tag","~$any","^C",32,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["~$b"]]]]],"^G","remove and return next item from buffer, called under chan mutex"],"~$close-buf!",["^ ","^>",null,"^?",["^ ","^@","^8","^A",34,"^B",4,"^C",34,"^D",14,"^E","^F","^G","called on chan closed under chan mutex, return ignored","^H",["^I",["^J",["^I",[["~$b"]]]]]],"^E","^F","^7","~$cljs.core.async.impl.protocols/close-buf!","^@","cljs/core/async/impl/protocols.cljs","^D",14,"^L",["^I",[["~$b"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",30,"^P","^Q","^C",34,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$b"]]]]],"^G","called on chan closed under chan mutex, return ignored"],"~$close!",["^ ","^>",null,"^?",["^ ","^@","^8","^A",21,"^B",4,"^C",21,"^D",10,"^E","~$cljs.core.async.impl.protocols/Channel","^G",null,"^H",["^I",["^J",["^I",[["~$chan"]]]]]],"^E","^W","^7","~$cljs.core.async.impl.protocols/close!","^@","cljs/core/async/impl/protocols.cljs","^D",10,"^L",["^I",[["^X"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",20,"^P","^Q","^C",21,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^X"]]]]],"^G",null],"~$Handler",["^ ","^?",["^ ","^@","^8","^A",24,"^B",14,"^C",24,"^D",21,"~:protocol-symbol",true,"~:jsdoc",["^I",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$active?",[["~$h"]],"~$blockable?",[["~$h"]],"~$commit",[["~$h"]]]]],"^[",true,"^7","~$cljs.core.async.impl.protocols/Handler","^@","cljs/core/async/impl/protocols.cljs","^D",21,"^B",1,"^A",24,"^11",["^ ","^12",["^ ","^13",[["~$h"]],"^14",[["~$h"]],"^15",[["~$h"]]]],"~:info",null,"^C",24,"~:tag","^Q","~:impls",["^6",[]],"^10",["^I",["@interface"]]],"^14",["^ ","^>",null,"^?",["^ ","^@","^8","^A",26,"^B",4,"^C",26,"^D",14,"^E","^16","^G","returns true if this handler may be blocked, otherwise it must not block","^H",["^I",["^J",["^I",[["~$h"]]]]]],"^E","^16","^7","~$cljs.core.async.impl.protocols/blockable?","^@","cljs/core/async/impl/protocols.cljs","^D",14,"^L",["^I",[["~$h"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",24,"^P","^Q","^C",26,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$h"]]]]],"^G","returns true if this handler may be blocked, otherwise it must not block"],"^13",["^ ","^>",null,"^?",["^ ","^@","^8","^A",25,"^B",4,"^C",25,"^D",11,"^E","^16","^G","returns true if has callback. Must work w/o lock","^H",["^I",["^J",["^I",[["~$h"]]]]]],"^E","^16","^7","~$cljs.core.async.impl.protocols/active?","^@","cljs/core/async/impl/protocols.cljs","^D",11,"^L",["^I",[["~$h"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",24,"^P","^Q","^C",25,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$h"]]]]],"^G","returns true if has callback. Must work w/o lock"],"~$Buffer",["^ ","^?",["^ ","^@","^8","^A",30,"^B",14,"^C",30,"^D",20,"^[",true,"^10",["^I",["@interface"]],"^11",["^ ","^12",["^ ","~$full?",[["~$b"]],"^=",[["~$b"]],"~$add!*",[["~$b","~$itm"]],"^T",[["~$b"]]]]],"^[",true,"^7","^F","^@","cljs/core/async/impl/protocols.cljs","^D",20,"^B",1,"^A",30,"^11",["^ ","^12",["^ ","^1=",[["~$b"]],"^=",[["~$b"]],"^1>",[["~$b","^1?"]],"^T",[["~$b"]]]],"^17",null,"^C",30,"^18","^Q","^19",["^6",[]],"^10",["^I",["@interface"]]],"^1=",["^ ","^>",null,"^?",["^ ","^@","^8","^A",31,"^B",4,"^C",31,"^D",9,"^E","^F","^G","returns true if buffer cannot accept put","^H",["^I",["^J",["^I",[["~$b"]]]]]],"^E","^F","^7","~$cljs.core.async.impl.protocols/full?","^@","cljs/core/async/impl/protocols.cljs","^D",9,"^L",["^I",[["~$b"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",30,"^P","^Q","^C",31,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$b"]]]]],"^G","returns true if buffer cannot accept put"],"~$add!",["^ ","^>",null,"^?",["^ ","^@","^8","^A",36,"^B",7,"^C",36,"^D",11,"^H",["^I",["^J",["^I",[["~$b"],["~$b","^1?"]]]]],"~:top-fn",["^ ","^O",false,"~:fixed-arity",2,"^R",2,"^L",["^I",[["~$b"],["~$b","^1?"]]],"^H",["^I",[["~$b"],["~$b","^1?"]]],"^N",["^I",[null,null]]]],"^7","~$cljs.core.async.impl.protocols/add!","^@","cljs/core/async/impl/protocols.cljs","^D",11,"^1B",["^ ","^O",false,"^1C",2,"^R",2,"^L",["^I",[["~$b"],["~$b","^1?"]]],"^H",["^I",[["~$b"],["~$b","^1?"]]],"^N",["^I",[null,null]]],"^L",["^I",[["~$b"],["~$b","^1?"]]],"^M",null,"^1C",2,"^N",["^I",[null,null]],"^B",1,"^O",false,"^12",[["^ ","^1C",1,"^O",false],["^ ","^1C",2,"^O",false,"^18","^Q"]],"^A",36,"^C",36,"^R",2,"^S",true,"^H",["^I",[["~$b"],["~$b","^1?"]]]],"^1>",["^ ","^>",null,"^?",["^ ","^@","^8","^A",33,"^B",4,"^C",33,"^D",9,"^E","^F","^G","if room, add item to the buffer, returns b, called under chan mutex","^H",["^I",["^J",["^I",[["~$b","^1?"]]]]]],"^E","^F","^7","~$cljs.core.async.impl.protocols/add!*","^@","cljs/core/async/impl/protocols.cljs","^D",9,"^L",["^I",[["~$b","^1?"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",30,"^P","^Q","^C",33,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$b","^1?"]]]]],"^G","if room, add item to the buffer, returns b, called under chan mutex"],"~$ReadPort",["^ ","^?",["^ ","^@","^8","^A",13,"^B",14,"^C",13,"^D",22,"^[",true,"^10",["^I",["@interface"]],"^11",["^ ","^12",["^ ","~$take!",[["~$port","~$fn1-handler"]]]]],"^[",true,"^7","~$cljs.core.async.impl.protocols/ReadPort","^@","cljs/core/async/impl/protocols.cljs","^D",22,"^B",1,"^A",13,"^11",["^ ","^12",["^ ","^1G",[["^1H","^1I"]]]],"^17",null,"^C",13,"^18","^Q","^19",["^6",[]],"^10",["^I",["@interface"]]],"~$Channel",["^ ","^?",["^ ","^@","^8","^A",20,"^B",14,"^C",20,"^D",21,"^[",true,"^10",["^I",["@interface"]],"^11",["^ ","^12",["^ ","^V",[["^X"]],"~$closed?",[["^X"]]]]],"^[",true,"^7","^W","^@","cljs/core/async/impl/protocols.cljs","^D",21,"^B",1,"^A",20,"^11",["^ ","^12",["^ ","^V",[["^X"]],"^1L",[["^X"]]]],"^17",null,"^C",20,"^18","^Q","^19",["^6",[]],"^10",["^I",["@interface"]]],"^1L",["^ ","^>",null,"^?",["^ ","^@","^8","^A",22,"^B",4,"^C",22,"^D",11,"^E","^W","^G",null,"^H",["^I",["^J",["^I",[["^X"]]]]]],"^E","^W","^7","~$cljs.core.async.impl.protocols/closed?","^@","cljs/core/async/impl/protocols.cljs","^D",11,"^L",["^I",[["^X"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",20,"^P","^Q","^C",22,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^X"]]]]],"^G",null],"~$UnblockingBuffer",["^ ","^?",["^ ","^@","^8","^A",43,"^B",14,"^C",43,"^D",30,"^[",true,"^10",["^I",["@interface"]],"^11",["^ ","^12",["^ "]]],"^[",true,"^7","~$cljs.core.async.impl.protocols/UnblockingBuffer","^@","cljs/core/async/impl/protocols.cljs","^D",30,"^B",1,"^A",43,"^11",["^ ","^12",["^ "]],"^17",null,"^C",43,"^18","^Q","^19",["^6",[]],"^10",["^I",["@interface"]]],"~$MAX-QUEUE-SIZE",["^ ","^?",["^ ","^@","^8","^A",11,"^B",14,"^C",11,"^D",28,"~:const",true],"^7","~$cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","^@","cljs/core/async/impl/protocols.cljs","^D",28,"~:const-expr",["^ ","~:op","^1Q","~:val",1024,"~:env",["^ ","~:context","~:expr"],"~:form",1024,"^18","~$number"],"^B",1,"^1Q",true,"^A",11,"^C",11,"^18","^1Z"],"^15",["^ ","^>",null,"^?",["^ ","^@","^8","^A",28,"^B",4,"^C",28,"^D",10,"^E","^16","^G","commit to fulfilling its end of the transfer, returns cb. Must be called within lock","^H",["^I",["^J",["^I",[["~$h"]]]]]],"^E","^16","^7","~$cljs.core.async.impl.protocols/commit","^@","cljs/core/async/impl/protocols.cljs","^D",10,"^L",["^I",[["~$h"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",24,"^P","^Q","^C",28,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$h"]]]]],"^G","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"],"~$put!",["^ ","^>",null,"^?",["^ ","^@","^8","^A",17,"^B",4,"^C",17,"^D",8,"^E","~$cljs.core.async.impl.protocols/WritePort","^G","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.","^H",["^I",["^J",["^I",[["^1H","~$val","^1I"]]]]]],"^E","^21","^7","~$cljs.core.async.impl.protocols/put!","^@","cljs/core/async/impl/protocols.cljs","^D",8,"^L",["^I",[["^1H","^22","^1I"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",16,"^P","^Q","^C",17,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["^1H","^22","^1I"]]]]],"^G","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."],"^1G",["^ ","^>",null,"^?",["^ ","^@","^8","^A",14,"^B",4,"^C",14,"^D",9,"^E","^1J","^G","derefable val if taken, nil if take was enqueued","^H",["^I",["^J",["^I",[["^1H","^1I"]]]]]],"^E","^1J","^7","~$cljs.core.async.impl.protocols/take!","^@","cljs/core/async/impl/protocols.cljs","^D",9,"^L",["^I",[["^1H","^1I"]]],"^M",null,"^N",["^I",[null,null]],"^B",1,"^O",false,"^A",13,"^P","^Q","^C",14,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^1H","^1I"]]]]],"^G","derefable val if taken, nil if take was enqueued"],"~$WritePort",["^ ","^?",["^ ","^@","^8","^A",16,"^B",14,"^C",16,"^D",23,"^[",true,"^10",["^I",["@interface"]],"^11",["^ ","^12",["^ ","^20",[["^1H","^22","^1I"]]]]],"^[",true,"^7","^21","^@","cljs/core/async/impl/protocols.cljs","^D",23,"^B",1,"^A",16,"^11",["^ ","^12",["^ ","^20",[["^1H","^22","^1I"]]]],"^17",null,"^C",16,"^18","^Q","^19",["^6",[]],"^10",["^I",["@interface"]]]],"~:require-macros",["^ "],"^G",null]